1) Running parse.pl

- Make sure you have the DBI, Time::Local, Text::CSV and XML::Parser::PerlSAX Perl modules installed.

- Create a MySQL database and perform the following queries:
 CREATE TABLE `edge` (
  `fromuser` varchar(255) DEFAULT NULL,
  `touser` varchar(255) DEFAULT NULL,
  `weight` float DEFAULT NULL,
  `article` varchar(255) DEFAULT NULL
 );
 CREATE TABLE `eigenvector` (
  `user` varchar(255) NOT NULL,
  `article` varchar(255) NOT NULL,
  `v1` double NOT NULL COMMENT 'vectorelement to the smallest eigenvalue',
  `v2` double NOT NULL COMMENT 'vectorelement to the 2nd smallest eigenvalue',
  PRIMARY KEY (`user`,`article`)
 );
 CREATE TABLE `eigenvalue` (
  `article` varchar(255) NOT NULL,
  `lambda1` double NOT NULL COMMENT 'smallest eigenvalue',
  `lambda2` double NOT NULL COMMENT 'second smallest eigenvalue',
  PRIMARY KEY (`article`)
 );

CREATE TABLE `entry` (
  `userid` varchar(255) NOT NULL,
  `timestamp` datetime NOT NULL,
  `article` varchar(255) NOT NULL
)

-- --------------------------------------------------------------------------------
-- Routine DDL
-- Note: comments before and after the routine body will not be stored by the server
-- --------------------------------------------------------------------------------
DELIMITER $$

CREATE DEFINER=`root`@`localhost` PROCEDURE `getEdges`(art varchar(255), dmax int)
BEGIN
    DECLARE currentUser varchar(255);
    DECLARE lastUser  varchar(255);
    DECLARE currentTimestamp datetime;
    DECLARE lastTimestamp datetime;
    DECLARE dt int;
    DECLARE w float;
    DECLARE wdt float;
    DECLARE done INT DEFAULT FALSE;
    
    DECLARE cur CURSOR FOR SELECT userid, timestamp FROM wpdump.entry
    WHERE article = art
    ORDER BY timestamp;
    
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;
    SET lastUser = '';
    SET w = 0;
    
    DROP TABLE IF EXISTS tmp;
    CREATE TEMPORARY TABLE tmp (fromuser  varchar(255), touser  varchar(255), weight float);
    ALTER TABLE tmp ADD PRIMARY KEY CLUSTERED (fromuser, touser);
    
    OPEN cur;
    read_loop: LOOP
        #SET done = FALSE;
        FETCH cur INTO currentUser, currentTimestamp;
        
        IF done THEN
          LEAVE read_loop;
        END IF;
        
        IF currentUser <> lastUser AND lastUser <> '' THEN
            SET dt = timestampdiff(second, lastTimestamp, currentTimestamp);
            IF dt < dmax THEN
                SET wdt = 1 - (dt / dmax);
            ELSE
                SET wdt = 0;
            END IF;
            
            SELECT count(*) INTO @w FROM tmp WHERE fromuser = currentUser AND touser = lastUser;
            IF @w > 0 THEN
                #SELECT weight INTO @w FROM tmp WHERE fromuser = currentUser AND touser = lastUser;
                #UPDATE tmp SET weight = (@w + wdt) WHERE fromuser = currentUser AND touser = lastUser;
                UPDATE tmp
                SET weight = (weight + wdt)
                WHERE fromuser = currentUser AND touser = lastUser;
            ELSE
                INSERT INTO tmp VALUES (currentUser, lastUser, wdt);
            END IF;
            
        END IF;
        
        SET lastUser = currentUser;
        SET lastTimestamp = currentTimestamp;
    END LOOP;
    CLOSE cur;
END;


- Get a Wikipedia stub file from http://dumps.wikimedia.org/

- Run 'perl parse.pl CONNECTION ARTICLES DTMAX DUMPFILE' with
    CONNECTION : database credentials in the form "dbname,dbhost,dbuser,dbpass"
    ARTICLES : page titles whose history you want to analyse as comma-separated list, e.g. "Alan Smithee, Ang Lee, Aussagenlogik" (use those double quotes!)
    DTMAX : the maximum time difference between edits (as integer)
    DUMPFILE : path to the Wikipedia dump file

2) Eigenvalue generator

The 'evgen' tool calculated eigenvalues and associated eigenvectors and is automatically called by the perl parser. Running it should not be necessary except for debugging.

- Run 'evgen-bin/evgen "Articlename"' (for a debug html output add a second parameter, e.g. 'evgen Articlename debug')

